1) Jinja2 Templating
Jinja2 is the main way of doing templating in python.
why do we need templating?
one use case is config templates w/ variables in a yaml or json file, for different devices.
or a website - html template and a database of variables, for different users
django has a template engine built into it
another use case, an email template with variables from some source,

2) Jinja2 Constructs
we'll have some source of variables
we'll have some template file (initially start with the template being a file in a program)
we'll have some set of strings/files output from the template + variables
templates have the capability to store variables, have some logic (for loops or conditional if statements)
templates have the capability to deal with lists and dictionaries
---
what do the constructs look like?
Variables: {{ vlan}}
inside the double curly brace is an expression, whether it's simply a variable substitution or a mathmatical expression
Conditionals:
 {% if var == 'value' %}
 string of output text
 {% elif var == 'other value' %}
 next string of output text
 {% else $}
 the else clause
 {% endif %}
in the template, we need clear indicators to separate code block from just text.
elif and else are optional, endif is not.
can also nest conditional statements, if statements inside of other if statements
can nest if statements inside of for loops too.
For Loops:
 {% for item in some_list %}
 string of output {{ item }}
 {% endfor %}
# the {{ item }} refers to the {% for item... %}
Jinja2 Data Structures:
List:  {{ some_list[0] }}
can have some list and refer to elements with index values, just like python
Dictionary: {{ a_dict["key"] }}
  or {{ a_dict.key }}
Loop over a dictionary:
 {% for key in my_dict %}
 {{ key }}
 {% endfor %}

 {% for k, v in my_dict.items() %}
 some text {{ k }} and {{ v }}
 {% endfor %}

3) Jinja2 Variables
using Jinja in code:
 pip install jinja2
 from jinja2 import Template
 text1 = "some text"
 j2_template = Template(text1) # use Template class, pass it the text1 variable, and that creates a jinja object.
 output = j2_template.render() # call .render on the template
 print(output)
# making it more interesting, working with variables
 from jinja2 import Template
 bgp_conf = """
 router bgp {{ bgp_as }}
  bgp router-id 10.220.88.20
 """
 j2_template = Template(bgp_conf)
 output = j2_template.render(bgp_as=22)
 print(output)
this is valid:
 example_expr = """
 some text with expressions {{ 13 + 3 }}
 """
 j2_template = Template(example_expr)
 output = j2_template.render()
 print(output)
result is: "some text with expressions 16"
an example with multiple variables in the string:
 from jinja2 import Template
 bgp_config = """
 router bgp {{ bgp_as }}
  bgp router-id {{router_id}}
 """
 j2_template = Template(bgp_config)
 output = j2_template.render(bgp_as=22, router_id="1.1.1.1")
 print(output)
as templates grow, passing in each var in the render statement becomes unmanageable. so use dictionaries.
 from jinja2 import Template
 bgp_config = """
 router bgp {{ bgp_as }}
  bgp router-id {{ router_id }}
 """
 my_vars = {
     "bgp_as": 22,
     "router_id": "1.1.1.1"
 }
 j2_template = Template(bgp_config)
 output = j2_template.render(**my_vars)
 print(output)

4) Jinja2 Environment
using a template stored in a file:
 from jinja2 import Template
 filename = "bgp_config.j2"
 with open(filename) as f:
     my_template = f.read()
 template_vars = {
     "bgp_as": 22,
     "router_id": "1.1.1.1"
 }
 j2_template = Template(my_template) # my_template is the contents of a file as one string.
 output = j2_template.render(**template_vars)
 print(output)
problems with doing it this way:
if you have an undefined var, then the output works, with missing text, and no error.
have to do more special file handling if you want to look in other dirs (paths) for templates.
if your template includes other templates (possible) then this reading style breaks down.
THE FIX, use a Jinja2 Environment
 from jinja2 import FileSystemLoader, StrictUndefined
 from jinja2.environment import Environment
 env = Environment() # create a jinja2 Environment
 env.loader = FileSystemLoader('.') # call environment loader, using FileSystemLoader class to define where to look for templates, '.' means 'look in working directory'
 my_vars = { blah blah dict }
 template_file = 'bgp_config.j2'
 template = env.get_template(template_file) # we load the template differently that with open(), using get_template method of the env, with template_file
 output = template.render(**my_vars)
 print(output)
so it's all similar to the with open way, but this is centered around env.get_template(template_file)
in order to get the program to fail on undefined variables:
 env = Environment(undefined=StrictUndefined)
in order to search for the template file in a subdirectory:
 env.loader = FileSystemLoader('./templates/')
can even call FileSystemLoader with a list of directories to search:
 env.loader = FileSystemLoader(['.', './templates/' ])

5) Jinja2 Conditionals (Part1)
just a review of information from video 2.
oh, except he shows this conditional, which means if True, and his variable primary_ip is the bool True.
{% if primary_ip %}
{% endif %}

6) Junja2 Whitespace Stripping
conditional lines can cause extra whitespace.
remove the conditional whitespace with -
{%- if primary_ip %}
or {% if primary_ip -%}
the - negates all whitespace 'surrounding the conditional,' new lines and spaces

7) Jinja2 Conditionals (Part2)
good use case:
"""
interface GigabitEthernet0/1/0
  {% if mode == "access" %}
  switchport access vlan 400
  switchport mode access
  {%- elif mode == "trunk" %}
  switchport trunk native vlan 1
  switchport trunk allowed vlan 1,300,400
  switchport mode trunk
  {%- endif %}
"""
Kirk says that you should push your complexity out of the template and into the program.
template complexity can get out of hand quickly, making it very hard to debug.
...and use the whitespace stripping syntax to make the template more readable
Kirk simplifies the if, elif template above to be if, else, since there are only two modes.

8) Jinja2 Nested Conditionals
good use case: an if statement with 'is defined' - again, his script var has bgp_peer1 = True
{%- if bgp_peer1 is defined %}
neighbor {{ peer_ip }}
 address-family ipv4 unicast
  {%- if bgp_policy is defined %}
  route-policy ALLOW in
  route-policy ALLOW out
  {%- endif %}
{%- endif %}
he's showing that you can next conditionals.  Key is that the first endif statement is assoc with the last if statement, and the last endif with the first if statement.

9) Jinja2 Loops (Part1)
for loops
you can loop over a list, a dictionary, ...even range(#)
whoa, you can use some python functions in the jinja template:
{%- for port_number in range(24) %}
interface GigabitEthernet0/1/{{ port_number }}
  switchport access vlan 400
  switchport mode access
!
{%- endfor %}
remember how range works:
range(24) = 0 - 23
range(1, 24) = 1 - 23

10) Jinja2 Loops (Part2)
continuing from the example in the last video, a problem:
the interface name is part of the template, and Kirk thinks it's better if the interface name is in the python program
how does he do that?
from jinja2 import FileSystemLoader, StrictUndefined
from jinja2.environment import Environment

env = Environment(undefined=StrictUndefined)
env.loader = FileSystemLoader(".")

# make a list of each interface name
base_intf = "GigabitEthernet0/1/"
intf_list = []
for intf_number in range(24):
    intf_name = f"{base_intf}{intf_number}"
    intf_list.append(intf_name)

# imbed the interface name list into a dictionary for passing to template.render
intf_vars = {
    "intf_list": intf_list,
}

template_file = "intf_config2.j2"
template = env.get_template(template_file)
output = template.render(**intf_vars)
print(output)
+=-
{%- for intf in intf_list %}
interface {{ intf }}
  switchport mode access
{%- endif %}

11) Jinja2 Loop Nesting
he uses a for loop nested in another to print out GigabitEthernet0/0/0 through 0/3/24 - see j2play.py
{# this is a comment in Jinja2 #}
{#- this is a comment in Jinja2 with whitespace stripping #}
{#
Jinja2 comments can be
multiple lines
#}

12) Jinja2 Lists
in jinja2, you can call a single element from a list with an index #
you can iterate over a list with a for loop, too.
ex.
First element: {{ intf_list[0] }}
Last element: {{ intf_list[-1] }}
this is new - Length of List: {{ intf_list | length }}
  everything between the {{ }} in jinja2 is called an 'expression'
  jinja2 allows for piping data into a 'filter', which is what length is, a filter.
print an entire jinja2 list - Entire List {{ intf_list }}
  the output looks just like printing a list in python:
  ['GigabitEthernet0/1/0', 'GigabitEthernet0/1/1', 'GigabitEthernet0/1/2', ...]

13) Jinja2 Dictionaries
reminder of dictionary syntax in jinja2 template:
{{ a_dict["key"] }} or {{ a_dict.key }}
reminder of looping over a dictionary
{# this will print out all the keys #}
{% for key in my_dict %}
{{ key }}
{% endfor %}
{# this will print out all the keys and values #}
{% for k, v in my_dict.items() %}
Some text {{ k }} and {{ v }}
{% endfor %}
ex.
# arp_entry dict in python script:
arp_entry = {
        "interface": "mgmt0",
        "ip": "10.0.0.72",
        "mac": "2C:C2:60:36:32:21",
        "age": 140.0
}
{# jinja2 template #}
ARP Interface:
{{ arp_entry["interface"] }}
MAC --> IP
{{ arp_entry['mac'] }} --> {{ arp_entry["ip"] }}
For loop in dict
{%- for k in arp_entry %}
     {{ k }}
{%- endfor %}
For loop in dict (using items)
{%- for k, v in arp_entry.items() %}
    {{ k }} --> {{ v }}
{%- endfor %}

14) Jinja2 Create Variables and Filters
this is how you create variables within a jinja2 template
{%- set var1 = 'Cisco' %}
{%- set var2 = 'Arista' %}
{{ var1 }}
{{ var2 }}
in addition to strings, you can make lists in jinja2 template
{%- set my_list = ['cisco', 'arista', 'juniper'] %}
{{ my_list }}
and there is a thing called filters.  capitalize, lower, upper, center(80) are filters.  filters can be chained:
{{ var1 | capitalize }}
{{ var2 | upper }}
{{ var3 | capitalize | center(80) }}
and you can set default values in case the variable doesn't have a value:
{{ var4 | default("Some Default Value") }}
center(80) means 'center this text in a row 80 characters in width'
ansible uses jinja2 filters heavily.

15) Jinja2 includes
this is the jinja2 syntax to include another template
what jinja2 will do is find the other template, render the text in that template, and return that rendered string right into the first template:
so, this template:
header info
{% include 'other_template.j2' %}
footer info
<end>
and with other_template.j2 looking like this:
THIS IS TEXT FROM OTHER_TEMPLATE
<end>
the result is:
header info
THIS IS TEXT FROM OTHER_TEMPLATE
footer info
<end>
you can have multiple include statements in different places within the jinja2 template.
examples of where to use this?
configuration templating - your main template has global variables (snmp, ntp, aaa), and include template for interfaces
another way to include is with a variable as opposed to a string:
{# string include #}
{% include 'other_template.j2' %}
{# varible include #}
{% include template_var %}
in this way, we can programmatically pull in different templates

16) Jinja2 Other Advanced Topics
Jinja2 has something called macros, that act like functions.
you call the macro and then jinja2 repeats a block of text.
there is also a second way of doing template inheritance.  Kirk uses it for html but not for network stuff.
