1) complex data structures
complex data structures refers to list of list or list of dict, etc.  nested data structures, and they can be nested in different ways.
examples:
dictionary inside a list
 can always do type() on it to verify
 next up, he checks the number of entries in the list, with len()
 if it's only one element in the list, he'll look at it with print(arp[0])
 else, he'll write this code to look through the data structure:
for arp_entry in arp:
    print(arp_entry)
    break # because he wants to keep it simple for now, look at only one element.
that gives him the keys of this dict, then he breaks that up with print statements:
for arp_entry in arp:
    print(arp_entry['mac'])
    print(arp_entry['ip'])
    break
then he runs it without the break to look at all the results
first example was from napalm, and this next is from Arista EAPI
interfaces data structure...
print(interfaces) = very large
first, what is outtermost?  type(interfaces)
then, len(interfaces), only one entry,
so pop that element off...
new_interfaces = interfaces[0]
print(new_interfaces)
type(new_interfaces) ...it is a dictionary
want to look at keys
print(new_interfaces.keys())
then he looks at each key:
print(new_interfaces['result'])
save that into a new data structure, peeling the complex data structure back one layer at a time.
new_interfaces = new_interfaces['result']
once you figure out what you need, then create a function to do the lookup for you
once again, check type and length, and then print out that...
this example is %s layers % '6 or more'
get this example...
for intf_name, intf_value in new_interfaces.items():
    print(intf_name, end='')
    print("\t" + intf_value['interfaceStatus']) # 'interfaceStatus' is a key
peeling the complex data structure back one layer at a time.
this example is %s layers % '6 or more'
reconstruct all of this into a function...
use the vi history command

new_interfaces = interfaces[0]['result']['interfaces']

for intf_name, intf_value in new_interfaces.items():
    print(intf_name)
    print(intf_value['interfaceStatus'])
    print()

2) Changing Data Structure Format
something you'll do alot is change one complex data structure into another.
if a dict, look at keys
pick one of those keys, and print it out
innermost to outtermost:
strings, inner dictionary, list, outer dictionary
lldp = {'outer key' : [{'inner key' : 'str'}]}
want a structure like:
[{}, {}, {}]  each dictionary is an interface. a list of dictionaries.
think of simplifying the problem.
make a program of it:
new_list = list()
for intf_name, lldp_data in lldp.items(): # items is a dict method, returns a list of tuple pairs
    lldp_data = lldp_data[0] # strip off the top list
    new_entry = {
        "intf_name": intf_name,
        "remote_port": lldp_data['remote_port'],
    }
    new_list.append(new_entry)
print()
pprint(new_list)
print()

he cannot stress enough to use the break to look at the first entry, as you build

3) Serialization
actually the first video to talk about YAML.
YAML, JSON...why do we need these things?
...so we are taking these things that are inside programs and serializing them out into a string of bytes.
either written to a file or across a Network
must be done in a standardized way, so that other computers can understand what this data is.
we need serialization protocols, and YAML and JSON are two popular ones
a lot of web apps, api's, use JSON, for computer to computer communications.
not super easy for humans to write.
YAML is much easier for humans to read & write it.
Ansible, Salt, an inventory of devices are YAML.
what does YAML look like?
look.yml
first line of this file is three hyphens
---
YAML indentation critical, even compared to python
want a list?
- router1
- router2
- router3
- router4
save it. make a python script:
import yaml
filename = input("Enter filename: ")
with open(filename) as f:
    yaml_out = yaml.load(f)
print(yaml_out)
what gets printed out is in list syntax:
['router1', 'router2', 'router3', 'router4']
you can also: yaml_out[0]
'router1'
type(yaml_out)
list

4) YAML
what if we want to create a dictionary in yaml?
---
key1: value1
key2: value2
key3: value3

print(yaml_out) looks like:
{'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}
could yaml_out.keys()
or yaml_out['key3']
nesting dictionaries:
---
router1:
  device_type: cisco_ios
  ip_addr: 1.1.1.1
  username: admin
  password: foobar
two space indent, router1 is the key for the outer dict, and all the indented
lines are the inner dict keys and values
{'router1': {'device_type': 'cisco_ios', 'ip_addr': '1.1.1.1', 'username': 'admin', 'password': 'foobar'}}

strings in yaml
---
- some_string
- "some string that has multiple words"
- null
# Booleans # comments...
- True
- False
- true
- false
- on
- off
- yes
- no
# what if need the literal yes/no on/off...
- 'yes'
print(yaml_out)
['some_string', 'some string that has multiple words', None, True, False, True, False, True, False, True, False, 'yes']
maybe you want multiline strings...
---
- |
  This is a multiline string in YAML.
  It can keep going across
  different lines.

that's it, no suffix
pring(yaml_out)
['This is a multiline string in YAML.\nIt can keep going across\ndifferent lines.\n']
use > instead of - | and result is
['This is a multiline string in YAML. It can keep going across different lines.\n']

to read a yaml file (look above for yaml.load())

5) JSON
frequently used for computer to computer interaction.  Arist EAPI uses JSON
python script to write out a data structure to a json file:
import json
my_data = {'device_name': 'rtr1', 'ip_addr': '10.1.1.1'}
filename = import("Enter filename: ")
with open(filename, "wt") as f:
    json.dump(my_data, f, indent=4)
print(json.dumps(my_data)) # dump s means dump as a string.  dump w/o s means dump as a file.
python and json share:
use {} for dictionary
use [] for list
differences b/w python and json:
python uses None, json uses null
python uses False, json uses false
json is picky about trailing commas after last element, can error on that.  (no comma after last element)
python script to read a pprint a json data structure:
import json
from pprint import pprint
filename = input("Input filename: ")
with open(filename) as f:
    data = json.load(f)
pprint(data)

6) CiscoConfParse (Part1)
CiscoConfParse is a library,  how is it useful?
there are devices with text config and hierarchy denoted by leading space:
interface FastEthernet4
  ip add 11.1.1.1 255.255.255.0
CiscoConfParse parses a config file and converts it into ... a tree he says
cisco_obj = CiscoConfParse("cisco1.txt")
  makes a CiscoConfParse object
to parse just a string, instead of a file: cannot pass as a string... convert to list
my_config = """
foobar
 foobar
"""
CiscoConfParse(my_config.splitlines()) # works b/c CiscoConfParse wants a list
in general, we are looking for structures with find_objects
help(cisco_obj.find_objects)
find_objects takes a linespec, which means a regex pattern
cisco_obj.find_objects(r"^interface") # for regex, always r"
looking for all lines that start with the word interface
returns a list-like structure, example:
[<IOSCfgLine # 171 'interface FastEthernet0'>,
 <IOSCfgLine # 174 'interface FastEthernet1'>]
intf = cisco_obj.find_objects(r"^interface")
print(intf[0]) # <IOSCfgLine # 171 'interface FastEthernet0'>
pritn(intf[0].text) # 'interface FastEthernet0'
search for more useful 'stuff':
dir(intf[0]) # liked .children, so...
print(intf[0].children) # [<IOSCfgLine # 172 ' no ip address' (parent is # 171)>]
print(intf[4].children) # multiple lines returned, in a list.
[<IOSCfgLine # 184 ' description *** LAN connection ***'  (parent is #183)>
 <IOSCfgLine # 185 ' ip address 10.220.88.20 255.255.255.0' (parent is #183)>
 <IOSCfgLine # 186 ' duplex auto' (parent is #183)>
 <IOSCfgLine # 187 ' speed auto' (parent is #183)>]
can loop over these:
for child in intf[4].children:
    print(child.text)

7) CiscoConfParse (Part2)
from ciscoconfparse import CiscoConfParse
CiscoConfParse("cisco1.txt")
cisco1.txt is a show run, plain text
if you want to give CiscoConfParse a large string, you have to turn it into a list first.
let's say we want a return of any interface with an IP address
help(cisco_obj.find_parents_w_child) =  we have a parnetspec and a childspec...
how to use this?
cisco_obj.find_objects_w_child(parentspec=r"interface", childspec=r"ip address")
...but that matches "no ip address" too, which is bad.
cisco_obj.find_objects_w_child(parentspec=r"interface", childspec=r"^\s+ip address")
regex - ^ means start of line, \s means whitespace, + means 1 or more of the previous character.
together the regex says "line starts with whitespace, first words are ip address."
what is returned is: [<IOSCfgLine # 183 'interface FastEthernet4'>], which is naming the interface with an IP address
match = cisco_obj.find_objects_w_child(parentspec=r"interface", childspec=r"^\s+ip address")
match is a list-like object, square brackets and greater than less than symbols
match[0].text is the string 'interface FastEthernet4'
whoa, can even match[0].children to see each of the 4 config lines under FastEthernet4
I wonder if match[0].children[1] returns the ip address line? yes

8) CiscoConfParse(Part3)
things we can do:
parent = cisco_obj.find_objects(r"^line con 0")
# parent will be a list of one item, so pop it off...
parent = parent[0]
# now, fun
parent.is_parent => True
parent.children # to see the children lines
children = parent.children
a_child = children[1]
a_child.is_child => True
a_chile.parent => returns CiscoConfObj of the parent, line @ 232 'line con 0'>
a_child.siblings # list the siblings to this child, returns CiscoConfObjs in a list
can also cisco_obj.find_objects_wo_child(parentspec=r"^interface", childspec=r"no ip address")
  returns all the lines where parentspec matches but doesn't have childspec.
there is a way to search inside of the children
there's a crypto map CRYPTO 10 ipsec-isakmp line with children, one of which is set pfs
match is a single CiscoConfigObj parent, crypto map CRYPTO 10 ipsec-isakmp
we can match children using regex.
match.re_search_children(r"set pfs ")
results is a CiscoConfObj with text ' set pfs group5'

parent.is_parent == True
a_child.is_child == YTrue
parent.children
a_chile.parent
a_child.siblings
parent.re_search_children(r"set pfs")
